var http = require('http');
var https = require('https');
var net =require('net');
var fs = require('fs');
var mysql = require('./mysql.js');

var httpPort = 3345;
var httpsPort = 3346;

var server = http.createServer(function(req,res){
	res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');
    res.setHeader("Access-Control-Allow-Headers", "X-Requested-With,token");
}).listen(httpPort,"127.0.0.1");
//console.log('Server running at http:///');

const options = {
  key: fs.readFileSync('3449933_node.hygeia520.com.key'),
  cert: fs.readFileSync('3449933_node.hygeia520.com.pem')
};
var serverTwo = https.createServer(options,function(req,res){
	res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');
    res.setHeader("Access-Control-Allow-Headers", "X-Requested-With,token");	
	if(req.url == '/'){
		res.end('ok');
	};
}).listen(3000,"");
//console.log('Server running at https:///');

/*net.createServer(function(socket){
  socket.once('data', function(buf){
   // console.log(buf[0]);
    // https数据流的第一位是十六进制“16”，转换成十进制就是22
    var address = buf[0] === 22 ? httpsPort : httpPort;
    //创建一个指向https或http服务器的链接
    var proxy = net.createConnection(address, function(){
      proxy.write(buf);
       //反向代理的过程，tcp接受的数据交给代理链接，代理链接服务器端返回数据交由socket返回给客户端
       socket.pipe(proxy).pipe(socket);
    }) 

    proxy.on('error', function(err) {
      console.log(err)
    })
  })

  socket.on('error', function(err){
    console.log(err);
  })
}).listen(3000);


//socket.io监听网址(http协议的)
var io = require('socket.io').listen(server);
	io.sockets.on('connection',function(socket){

		var roomID = socket.handshake.query.roomID;  // 获取房间ID
		//console.log(roomID);
		
		// 加入房间
		socket.join(roomID,function(err){
			if(err) return;
			mysql.select(roomID,function(error,results){
				 if(error) {
					 socket.emit('getCurrentRoomAllMessageEnd',error,results);
				 }else{
					 for(var d = 0,len = results.length; d < len; d++){
					    socket.emit('getCurrentRoomAllMessage',results[d]);
				     };
					 socket.emit('getCurrentRoomAllMessageEnd',error,'获取当前房间全部消息完成');
				 };
			});
		});

		//console.log(io.sockets.adapter.rooms);
		socket.on('message',function(data){
			mysql.insert([roomID,data.sender_id,data.content,data.file_name,data.type,data.send_date],function(error,msg){
				  if(error){
					  socket.emit('errMessage',msg);  //socket.emit发送给当前连接
				  }else{
					  socket.emit('suceessMessage',data);
					  socket.to(roomID).emit('suceessMessage',data);
				  };
			});
		});
		
		socket.on('disconnect',function(){		
		   socket.leave(roomID);
		});

	});
*/	
	
//socket.io监听网址(https协议的)
var ioTwo = require('socket.io').listen(serverTwo);
	ioTwo.sockets.on('connection',function(socket){

		var roomID = socket.handshake.query.roomID;  // 获取房间ID
		console.log(roomID);
		
		// 加入房间
		socket.join(roomID,function(err){
			if(err) return;
		});
		
		// 接受前端需要业务还是结算所有信息然后返回
		socket.on('getCurrentRoomAllMessage',function(data){
			mysql.select(roomID,data.service,function(error,results){
				 if(error) {
					 socket.emit('getCurrentRoomAllMessageEnd',error,results);
				 }else{
					 for(var d = 0,len = results.length; d < len; d++){
					    socket.emit('getCurrentRoomAllMessage',results[d]);
				     };
					 socket.emit('getCurrentRoomAllMessageEnd',error,'获取当前房间全部消息完成');
				 };
			});
		});

		//console.log(io.sockets.adapter.rooms);
		socket.on('message',function(data){
			mysql.insert([roomID,data.sender_id,data.content,data.file_name,data.type,data.service,data.send_date],function(error,msg){
				  if(error){
					  socket.emit('errMessage',msg);  //socket.emit发送给当前连接
				  }else{
				          data.id = msg.insertId;
					  socket.emit('suceessMessage',data);
					  socket.to(roomID).emit('suceessMessage',data);
				  };
			});
		});
		
	        //删除指定id消息
		socket.on('deleteMessage',function(data){
			mysql.delete(data.tableID,function(error,msg){
				 if(error) {
					 socket.emit('errMessage',msg);
				 }else{
					 socket.emit('deleteMessage',data);
					 socket.to(roomID).emit('deleteMessage',data);
				 };
			});
		});
		
		socket.on('disconnect',function(){		
		   socket.leave(roomID);
		});

	});	
	
	
var mysql = require('mysql');
var pool  = mysql.createPool({
  connectionLimit : 10,
  host            : 'test.richesme.com',
  user            : '',
  password        : '',
  database        : ''
});

var addSql = 'INSERT INTO node_socket_message(room_id,sender_id,content,file_name,type,service,send_date) VALUES(?,?,?,?,?,?,?)';
var selSql = 'SELECT * FROM node_socket_message WHERE room_id = ? AND service = ?';
var delSql = 'DELETE FROM node_socket_message WHERE id = ?'; 
 
function insertFun(arr,callback){       //  添加
	pool.getConnection(function(err, connection) {
	  if (err) {callback(true,'消息数据库连接失败');return;}; // not connected!
		  // Use the connection
		  connection.query(addSql, arr, function (error, results, fields) {
			 // When done with the connection, release it.
			 connection.release();
		 
			 // Handle error after the release.
			 if (error) {
						callback(true,'消息发送失败'); 
					  }else{
						callback(false);  
					  };
		 
			 // Don't use the connection here, it has been returned to the pool.
		  });
    });
};

function selectFun(roomID,service,callback){    //  查询
	pool.getConnection(function(err, connection) {
	  if (err) {callback(true,'消息数据库连接失败');return;}; // not connected!
		  // Use the connection
		  connection.query(selSql, [roomID,service], function (error, results, fields) {
			 // When done with the connection, release it.
			 connection.release();
		 
			 // Handle error after the release.
			 if (error) {
						callback(true,'获取消息失败'); 
					  }else{
						if(results){
							callback(false,results);
						}else{
							callback(false,[]);
						};						
					  };
		 
			 // Don't use the connection here, it has been returned to the pool.
		  });
    });
};

function deleteFun(id,callback){       //  删除
	pool.getConnection(function(err, connection) {
	  if (err) {callback(true,'消息数据库连接失败');return;}; // not connected!
		  // Use the connection
		  connection.query(delSql, id, function (error, results, fields) {
			 // When done with the connection, release it.
			 connection.release();
		 
			 // Handle error after the release.
			 if (error) {
						callback(true,'消息删除失败'); 
					  }else{
						callback(false);  
					  };
		 
			 // Don't use the connection here, it has been returned to the pool.
		  });
    });
};



module.exports = {
	select: selectFun,
	insert: insertFun,
	delete: deleteFun
};	
	
